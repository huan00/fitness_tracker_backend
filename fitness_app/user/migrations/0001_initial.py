# Generated by Django 4.2.1 on 2023-05-04 20:49

from django.db import migrations, models
import django.utils.timezone
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('age', models.IntegerField(null=True)),
                ('sex', models.CharField(null=True)),
                ('weight', models.IntegerField(null=True)),
                ('profile_image', models.ImageField(blank=True, default='', upload_to=user.models.upload_path)),
                ('height', models.IntegerField(null=True)),
                ('workout_days', models.IntegerField(blank=True)),
                ('goal', models.CharField(choices=[('a', 'Staying Healthy'), ('b', 'Lose Weight'), ('c', 'Tone Muscle'), ('d', 'Gain Muscle')], default='a')),
                ('PR_history', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', user.models.CustomUserManager()),
            ],
        ),
    ]
